---
source: 2
revision: 613
description: 
createdBy:
  displayName: Ganesh Kumar DC
  url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
  _links:
    avatar:
      href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  id: 3383415f-d007-662a-bf9e-cab455d012f1
  uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
  imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  inactive: true
  descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
createdOn: '2021-07-12T07:02:48.247Z'
modifiedBy:
  displayName: RobG
  url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/487cda59-985a-6d45-a343-607e62446177
  _links:
    avatar:
      href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
  id: 487cda59-985a-6d45-a343-607e62446177
  uniqueName: robert@lansacloudlansacom.onmicrosoft.com
  imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
  inactive: true
  descriptor: aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
modifiedOn: '2021-10-14T07:49:51.887Z'
isDeleted: false
isDisabled: false
lastRelease:
  id: 375
  name: Release-85
  artifacts: []
  _links: {}
  description: Test N:\EPC140000\EPC142070\_Release built on 11/4/2022
  releaseDefinition:
    id: 17
    projectReference: 
    _links: {}
  createdOn: '2022-04-13T01:28:31.690Z'
  createdBy:
    displayName: RobG
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/487cda59-985a-6d45-a343-607e62446177
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
    id: 487cda59-985a-6d45-a343-607e62446177
    uniqueName: robert@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
    inactive: true
    descriptor: aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
variables:
  Build-all:
    value: 'True'
    allowOverride: true
  Build-w12r2d-14-2:
    value: 'False'
    allowOverride: true
  Build-w12r2d-15-0:
    value: 'False'
    allowOverride: true
  Build-w16d-14-2:
    value: 'False'
    allowOverride: true
  Build-w16d-14-2j:
    value: 'False'
    allowOverride: true
  Build-w16d-15-0:
    value: 'False'
    allowOverride: true
  Build-w16d-15-0j:
    value: 'False'
    allowOverride: true
  Build-w19d-14-2:
    value: 'False'
    allowOverride: true
  Build-w19d-14-2j:
    value: 'False'
    allowOverride: true
  Build-w19d-15-0:
    value: 'False'
    allowOverride: true
  Build-w19d-15-0j:
    value: 'True'
    allowOverride: true
  CookbooksSource:
    value: "$(System.DefaultWorkingDirectory)\\cookbooks"
  jpnLanguage:
    value: JPN
  ResourceGroupName:
    value: BakingDP
  SubscriptionId:
    value: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
variableGroups:
- 3
- 1
- 29
- 30
environments:
- id: 155
  name: w12r2d142 Aus
  rank: 1
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w12r2d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 467
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 526
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 527
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates-celestial
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d142 Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-14-2" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -imageId "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv142)
          -stackName "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w12r2d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: '-SkuName "$(Gate.Sku)" -deploymentOutput ''$(deploymentOutput)'' '
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/155
- id: 156
  name: Publish Preview Images
  rank: 11
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables: {}
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 468
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 525
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 528
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      proofOfPresenceTenants: {}
      timeoutInMinutes: 0
      jobCancelTimeoutInMinutes: 1
      condition: succeeded()
      overrideInputs: {}
    rank: 1
    phaseType: 2
    name: Agentless job
    refName: 
    workflowTasks:
    - environment: {}
      taskId: bcb64569-d51a-4af0-9c01-ea5d05b3b622
      version: 8.*
      name: Publish Preview Images
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        instructions: |-
          1. All preceding stages must be successful, or skipped
          2. Publish the preview images in the marketplace
          3. Wait for the email "Approve the offer preview for LANSA Scalable License"
          4. Increment the Version number in the Image Build Pipeline
          5. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the "SKU Version" Variable Group.
          6. Only now the pipeline may be continued to test the preview images
        emailRecipients: ''
        onTimeout: reject
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: w12r2d142 Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w12r2d150 Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w16d142 Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w16d150 Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w19d142 Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w19d150 Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w16d142j Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w16d150j Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w19d142j Aus
    conditionType: 2
    value: '4'
    result: 
  - name: w19d150j Aus
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/156
- id: 157
  name: w12r2d142 Aus East Preview
  rank: 13
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-AE-w12r2d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 469
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 524
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 529
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates-celestial
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d142 Aus East Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-14-2" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-AE-w12r2d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/157
- id: 158
  name: Go Live
  rank: 31
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables: {}
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 470
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 523
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 530
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      proofOfPresenceTenants: {}
      timeoutInMinutes: 0
      jobCancelTimeoutInMinutes: 1
      condition: succeeded()
      overrideInputs: {}
    rank: 1
    phaseType: 2
    name: Agentless job
    refName: 
    workflowTasks:
    - environment: {}
      taskId: bcb64569-d51a-4af0-9c01-ea5d05b3b622
      version: 8.*
      name: Publish Production
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        instructions: |-
          1. ASAP Publish the preview image in the marketplace
          2. Wait for the email “Your Go-live submission for  LANSA Scalable License has been processed” before continuing these steps.
          3. Increment the Test Version Production Variable (TestVersion<SKU>) in the "SKU Version" Variable Group.
          4. Only now can the pipeline be continued to test the production images.
        emailRecipients: ''
        onTimeout: reject
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: w12r2d142 Aus East Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w12r2d142 US East Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w12r2d142 France Central Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w12r2d150 Aus East Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w12r2d150 US East Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w12r2d150 France Central Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d142 Eur West Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d142 US West Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d142 India Central Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d150 SA North Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d150 Canada Central Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w19d142 France Central Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w19d150 Brazil South Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w19d150 UK West Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d142j Japan West Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w16d150j Korea Central Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w19d142j US NorthCentral Preview
    conditionType: 2
    value: '4'
    result: 
  - name: w19d150j Germany West Central Preview
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/158
- id: 159
  name: w12r2d142 US East Production
  rank: 33
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-UE-w12r2d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 471
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 522
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 531
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates-celestial
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d142 US East Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-14-2" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w12r2d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/159
- id: 160
  name: w12r2d150 Aus
  rank: 2
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w12r2d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 472
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 521
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 532
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: " w12r2d150 Aus"
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-15-0" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'],
        'True'), eq(variables['Build-all'], 'True')))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V15 GA" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv15) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w12r2d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: '-SkuName "$(Gate.Sku)" -deploymentOutput ''$(deploymentOutput)'' '
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/160
- id: 162
  name: w12r2d150 Aus East Preview
  rank: 16
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-AE-w12r2d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 474
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 519
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 534
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d150 Aus East Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-15-0" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n
          \  $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-AE-w12r2d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/162
- id: 164
  name: w12r2d150 Asia East Production
  rank: 34
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-AE-w12r2d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 476
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 517
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 536
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d150 Asia East Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-15-0" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: East Asia
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w12r2d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/164
- id: 165
  name: w16d142 Aus
  rank: 3
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w16d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 477
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 516
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 537
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142 Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri
          = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv142) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'],
        'True'), eq(variables['Build-all'], 'True')))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/165
- id: 167
  name: w16d142 Eur West Preview
  rank: 19
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-EW-w16d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 479
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 514
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 539
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates-celestial
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142 Eur West Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: West Europe
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-AE-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/167
- id: 169
  name: w16d142 Europe West Production
  rank: 35
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-EW-w16d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 481
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 512
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 541
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142 Europe West Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: West Europe
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/169
- id: 170
  name: w16d150 Aus
  rank: 4
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w16d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 482
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 511
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 542
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: " w16d150 Aus"
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-15-0" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri
          = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv15) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w16d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/170
- id: 172
  name: w16d150 SA North Preview
  rank: 21
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-SN-w16d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 484
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 509
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 544
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d150 SA North Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-15-0" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |+
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default

        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: South Africa North
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-AE-w16d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/172
- id: 174
  name: w16d150 Aus East Production
  rank: 36
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-AE-w16d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 486
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 507
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 546
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d150 Aus East Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-15-0" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output copy
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w16d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/174
- id: 175
  name: w19d142 Aus
  rank: 5
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w19d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 487
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 506
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 547
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d142 Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-14-2" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri
          = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'],
        'True'), eq(variables['Build-all'], 'True')))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv142) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w19d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 375
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/375
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/175
- id: 179
  name: w19d142 UK South Production
  rank: 37
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-US-w19d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 491
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 502
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 551
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d142 UK South Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-14-2" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: UK South
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w19d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/179
- id: 180
  name: w19d150 Aus
  rank: 6
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w19d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 492
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 501
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 552
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150 Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri
          = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv15) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w19d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 371
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/371
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/180
- id: 182
  name: w19d150 Brazil South Preview
  rank: 23
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-BS-w19d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 494
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 499
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 554
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150 Brazil South Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Brazil South
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-AE-w19d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/182
- id: 184
  name: w19d150 Southeast Asia Production
  rank: 38
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-SA-w19d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 496
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 497
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 556
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150 Southeast Asia Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |+
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default

        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Southeast Asia
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w19d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/184
- id: 187
  name: w12r2d142 US East Preview
  rank: 14
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-UE-w12r2d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 563
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 566
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 567
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates-celestial
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d142 US East Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-14-2" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-UE-w12r2d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/187
- id: 188
  name: w12r2d142 France Central Preview
  rank: 15
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-FC-w12r2d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 564
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 565
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 568
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d142 France Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-14-2" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: France Central
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w12r2d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/188
- id: 189
  name: w12r2d150 US East Preview
  rank: 17
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-UE-w12r2d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 569
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 572
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 573
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d150 US East Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-15-0" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n
          \  $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-UE-w12r2d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/189
- id: 190
  name: w12r2d150 France Central Preview
  rank: 18
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-FC-w12r2d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 570
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 571
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 574
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates-celestial
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w12r2d150 France Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w12r2d-15-0" -osName "Windows Server 2012"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n
          \  $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: France Central
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w12r2d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete ResourceGroup
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/190
- id: 192
  name: w19d150 UK West Preview
  rank: 26
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-UW-w19d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 576
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 577
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 580
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150 UK West Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: UK West
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w19d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/192
- id: 194
  name: w19d142 France Central Preview
  rank: 24
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-FC-w19d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 582
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 583
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 586
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d142 France Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-14-2" -osName "Windows Server 2019"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: France Central
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w19d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/194
- id: 195
  name: w16d150 Canada Central Preview
  rank: 22
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-CC-w16d-15-0
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 587
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 590
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 591
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d150 Canada Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-15-0" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |+
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default

        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Canada Central
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-UE-w16d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/195
- id: 197
  name: w16d142 US West Preview
  rank: 20
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-UW-w16d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 593
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 596
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 597
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142 US West Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: West US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-UE-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/197
- id: 198
  name: w16d142 India Central Preview
  rank: 25
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-IC-w16d-14-2
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 594
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 595
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 598
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142 India Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2" -osName "Windows Server 2016"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Central India
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)'"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": testing
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/198
- id: 207
  name: w16d142j Aus
  rank: 7
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w16d-14-2j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 623
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 624
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 625
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142j Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2j" -osName "Windows Server 2016 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2j/w16d-14-2j.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLJPN) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w16d-14-2j" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/207
- id: 209
  name: w16d150j Aus
  rank: 8
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w16d-15-0j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 629
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 630
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 631
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d150j Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-15-0j" -osName "Windows Server 2016 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0j/w16d-15-0j.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLJPNLatest) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w16d-15-0j" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/209
- id: 210
  name: w19d142j Aus
  rank: 9
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w19d-14-2j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 632
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 633
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 634
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-14-2j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d142j Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-14-2j" -osName "Windows Server 2019 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-14-2j/w19d-14-2j.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLJPN) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w19d-14-2j" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/210
- id: 211
  name: w19d150j Aus
  rank: 10
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Custom-w19d-15-0j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 635
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 636
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 637
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: true
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150j Aus
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0j" -osName "Windows Server 2019 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0j/w19d-15-0j.txt\"\nif (Test-Path $path) {\n
          \   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default
          | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0]
          | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku
          = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host
          \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default
          | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId
          "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLJPNLatest) -stackName
          "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Custom-w19d-15-0j" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: ''
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: ''
        csmParametersFile: ''
        overrideParameters: ''
        deploymentMode: Incremental
        deploymentName: ''
        deploymentOutputs: ''
        addSpnToEnvironment: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: ReleaseStarted
    conditionType: 1
    value: ''
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 371
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/371
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions:
      isEnabled: false
      timeout: 1440
      samplingInterval: 15
      stabilizationTime: 5
      minimumSuccessDuration: 0
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/211
- id: 216
  name: w16d142j Japan West Preview
  rank: 27
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-JW-w16d-14-2j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 650
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 651
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 652
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142j Japan West Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2j" -osName "Windows Server 2016 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template  '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Japan West
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLJPN) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-AE-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/216
- id: 217
  name: w16d150j Korea Central Preview
  rank: 28
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-KC-w16d-15-0j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 653
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 654
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 655
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d150j Korea Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: '-Version "w16d-15-0j" -osName "Windows Server 2016 JPN" '
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |+
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default

        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Korea Central
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLJPNLatest) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-UE-w16d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/217
- id: 219
  name: w19d142j US NorthCentral Preview
  rank: 29
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-NC-w19d-14-2j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 659
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 660
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 661
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-14-2j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d142j US NorthCentral Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-14-2j" -osName "Windows Server 2019 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: North Central US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLJPN) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w19d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/219
- id: 220
  name: w19d150j Germany West Central Preview
  rank: 30
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Preview-GW-w19d-15-0j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 662
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 663
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 664
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: windows-2019
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150j Germany West Central Preview
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0j" -osName "Windows Server 2019 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Germany West Central
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLJPNLatest) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "patch/paas" -imageSource
          "Marketplace" -imageReleaseState "Preview" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "$(Log-Date) The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Preview-FC-w19d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: Australia East
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -gitBranch "debug/paas" -imageSource "Marketplace" -imageReleaseState
          "Preview"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  - name: Merge patch/paas cookbooks
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/220
- id: 221
  name: w16d142j US Central Production
  rank: 39
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-UC-w16d-14-2j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 665
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 666
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 667
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-14-2j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d142j US Central Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-14-2j" -osName "Windows Server 2016 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Central US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLJPN) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w16d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/221
- id: 222
  name: w16d150j Europe North Production
  rank: 40
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-EN-w16d-15-0j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 668
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 669
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 670
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w16d-15-0j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w16d150j Europe North Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w16d-15-0j" -osName "Windows Server 2016 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: North Europe
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLJPNLatest) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output copy
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w16d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/222
- id: 223
  name: w19d142j West India Production
  rank: 41
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-WI-w19d-14-2j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 671
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 672
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 673
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs:
        - alias: _Lansa Images - Cookbooks
          artifactType: Build
          artifactDownloadMode: All
          artifactItems: []
        - alias: _lansa_azure-quickstart-templates
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
        - alias: _robe070_cookbooks
          artifactType: GitHub
          artifactDownloadMode: All
          artifactItems: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-14-2j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d142j West India Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-14-2j" -osName "Windows Server 2019 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: 'Deploy ARM Template '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: West India
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V14 SP2" -msiURL
          $(msiURLJPN) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production" -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w19d-14-2" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/223
- id: 224
  name: w19d150j Switzerland North Production
  rank: 42
  owner:
    displayName: Ganesh Kumar DC
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3383415f-d007-662a-bf9e-cab455d012f1
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    id: 3383415f-d007-662a-bf9e-cab455d012f1
    uniqueName: GaneshKumar@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
    inactive: true
    descriptor: aad.MzM4MzQxNWYtZDAwNy03NjJhLWJmOWUtY2FiNDU1ZDAxMmYx
  variables:
    ResourceGroup:
      value: BakingDP-Prod-SN-w19d-15-0j
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 674
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 675
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 676
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 120
      jobCancelTimeoutInMinutes: 1
      condition: and(succeeded(), or(eq(variables['Build-w19d-15-0j'], 'True'), eq(variables['Build-all'],
        'True')))
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: w19d150j Switzerland North Production
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Set Gate Variable'
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0j" -osName "Windows Server 2019 JPN"
        script: "# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa
          Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri
          = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n
          \   $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default
          | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n
          \   Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable
          variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n
          \   $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n
          \   # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\"
          | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable
          variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n
          \   Write-host \"The value of Variable IsEnabled is updated to True and
          output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Artifact Check : Output Gate Variable'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |+
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)" | Out-Default

        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: InlineScript
        ScriptPath: ''
        Inline: |-
          Write-Host "Deleting Resource Group $(ResourceGroup)"
          Remove-AzResourceGroup -Name $(ResourceGroup) -Force
        ScriptArguments: ''
        errorActionPreference: silentlyContinue
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Deploy ARM Template
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: Create Or Update Resource Group
        resourceGroupName: "$(ResourceGroup)"
        location: Switzerland North
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "$(Gate.osName)" -lansaVersion "V15 GA" -msiURL
          $(msiURLJPNLatest) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded
          "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)"
          -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)"
          -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername
          "$(webUsername)" -webPassword "$(webPassword)" -imageSource "Marketplace"
          -imageReleaseState "Production"  -collation $(Collation_JPN)
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
    - environment: {}
      taskId: 567f7830-5655-4d11-b4c5-bada59a77796
      version: 1.*
      name: Azure Resource Group Tagging
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        Action: Add
        ResourceGroupName: "$(ResourceGroup)"
        Key: Usage
        Value: test-temp
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Print Deployment Output
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: |-
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Test ARM Deployment : URL Tests'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1"
        arguments: "-deploymentOutput '$(deploymentOutput)' -Language $(jpnLanguage)"
        script: |-
          # Use the deployment output to extract the IpAddress
          $deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'
          $IpAddress = $deploymentOutput.lbFqdn.value
          $url1 = "$IpAddress/cgi-bin/probe"
          $url2 = "$IpAddress/cgi-bin/lansaweb?about"
          $url3 = "$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $url4 = "$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG"
          $urls = @($url1, $url2, $url3, $url4)
          add-type @"
              using System.Net;
              using System.Security.Cryptography.X509Certificates;
              public class TrustAllCertsPolicy : ICertificatePolicy {
                  public bool CheckValidationResult(
                      ServicePoint srvPoint, X509Certificate certificate,
                      WebRequest request, int certificateProblem) {
                      return true;
                  }
              }
          "@
          [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
          $failureCount = 0
          forEach($url in $urls) {
              try{
                  $response = Invoke-WebRequest -Uri $url -TimeoutSec 14
                  $ResponseCode = $response.StatusCode
                  if($ResponseCode -ne 200) {
                      Write-Host "Response code not equal to 200: $ResponseCode" | Out-Default | Write-Verbose
                      $failureCount = $failureCount + 1
                  } else {
                      Write-Host $ResponseCode | Out-Default | Write-Verbose
                  }
              } catch {
                  Write-Host $_.Exception | Out-Default | Write-Verbose
                  $ResponseCode = $_.Exception.Response.StatusCode.Value__
                  $failureCount = $failureCount + 1
                  Write-Host $ResponseCode | Out-Default | Write-Verbose
              }
          }
          if($failureCount) {
              Write-Host "Request failed for $($failureCount) URL(s)"
              throw "The deployment failed the URL tests"
          } else {
              Write-Host "Successfully tested all URL(s)"
          }
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: 72a1931b-effb-4d2e-8fd8-f8472a07cb62
      version: 5.*
      name: 'Azure PowerShell : Test Image Version'
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        ConnectedServiceNameARM: e61ac796-c298-4e1f-a8dc-98fb50faa590
        ScriptType: FilePath
        ScriptPath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_test_image_version.ps1"
        Inline: |-
          Install-Module -Name Az.Compute -AllowClobber -Force
          Write-Host "$(Gate.Sku)"
          $SkuName = "$(Gate.Sku)"

          $var=ConvertFrom-Json '$(deploymentOutput)'

          # Download TestImageVersion PS Script
          New-Item -Path "$(CookbooksSource)\Tests\Tests" -ItemType Directory -verbose
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1" -OutFile "$(CookbooksSource)\Tests\TestImageVersion.ps1" -verbose

          $vmssName = $var.scalesetName.value
          Write-Host $vmssName | Out-Default

           # Execute the TestImageVersion PS Script
          Write-Host "Test the image version $SkuName by executing the script in the VMSS $vmssName" | Out-Default | Write-Verbose
          $result = Invoke-AzVmssVMRunCommand -ResourceGroupName "BakingDP-Prod-w19d-15-0" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath "$(CookbooksSource)\Tests\TestImageVersion.ps1" -Parameter @{ImgName = $SkuName}
          $result | Out-Default | Write-Host
          if ($result.Value[1].message -eq "") {
              Write-Host "Tested the image version in the VMSS successfully."
          } else {
              throw $result.Value[1].message
          }
        ScriptArguments: -SkuName "$(Gate.Sku)" -deploymentOutput '$(deploymentOutput)'
        errorActionPreference: stop
        FailOnStandardError: 'false'
        TargetAzurePs: LatestVersion
        CustomTargetAzurePs: ''
        pwsh: 'false'
        workingDirectory: ''
    - environment: {}
      taskId: 94a74903-f93f-4075-884f-dc11f34058b4
      version: 3.*
      name: Delete Resource Group
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: true
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs:
        timeoutInMinutes: "$(DeleteStackTimeOut)"
      condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      inputs:
        deploymentScope: Resource Group
        ConnectedServiceName: e61ac796-c298-4e1f-a8dc-98fb50faa590
        subscriptionName: 739c4e86-bd75-4910-8d6e-d7eb23ab94f3
        action: DeleteRG
        resourceGroupName: "$(ResourceGroup)"
        location: East US
        templateLocation: Linked artifact
        csmFileLink: ''
        csmParametersFileLink: ''
        csmFile: "$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json"
        csmParametersFile: ''
        overrideParameters: -osName "Windows Server 2012" -lansaVersion "V14 SP2"
          -msiURL "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi"
          -stackName "customimg" -certificateBase64Encoded "$(certificateBase64Encoded)"
          -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)"
          -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)"
          -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword
          "$(webPassword)" -imageSource "Marketplace" -imageReleaseState "Production"
        deploymentMode: Incremental
        deploymentName: CustomTestTemplate
        deploymentOutputs: deploymentOutput
        addSpnToEnvironment: 'true'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  - name: Cookbooks Merge & Tag
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 360
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/360
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": production
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/224
- id: 225
  name: Merge patch/paas cookbooks
  rank: 12
  owner:
    displayName: RobG
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/487cda59-985a-6d45-a343-607e62446177
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
    id: 487cda59-985a-6d45-a343-607e62446177
    uniqueName: robert@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
    inactive: true
    descriptor: aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
  variables: {}
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 677
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 678
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 679
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 0
      jobCancelTimeoutInMinutes: 1
      condition: succeeded()
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: Merge patch/paas cookbooks
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Write access to Git Repo (robe070/cookbooks)
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1"
        arguments: "-GitBranch '$(CookbooksBranchPreview)' -GitURL 'https://$(GitRobe070CookbooksPAT):x-oauth-basic@$(GitRobe070CookbooksGitHubName)'
          -GitUserEmail '$(GitUserEmail)' -GitUserName '$(GitUserName)' -GitRepoName
          '$(CookbooksSourceAlias)'"
        script: |
          # Write your PowerShell commands here.

          Write-Host "Hello World"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Merge robe070/cookbooks repo debug/paas to patch/paas
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitMerge.ps1"
        arguments: "-GitRepoName '$(CookbooksSourceAlias)' -GitSourceBranch '$(CookbooksBranch)'
          -GitTargetBranch '$(CookbooksBranchPreview)'"
        script: |
          # Write your PowerShell commands here.

          Write-Host "Hello World"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Publish Preview Images
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 359
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/359
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/225
- id: 226
  name: Cookbooks Merge & Tag
  rank: 32
  owner:
    displayName: RobG
    url: https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/487cda59-985a-6d45-a343-607e62446177
    _links:
      avatar:
        href: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
    id: 487cda59-985a-6d45-a343-607e62446177
    uniqueName: robert@lansacloudlansacom.onmicrosoft.com
    imageUrl: https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
    inactive: true
    descriptor: aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3
  variables: {}
  variableGroups: []
  preDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 680
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 1
  deployStep:
    id: 681
  postDeployApprovals:
    approvals:
    - rank: 1
      isAutomated: true
      isNotificationOn: false
      id: 682
    approvalOptions:
      requiredApproverCount: 
      releaseCreatorCanBeApprover: false
      autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: false
      enforceIdentityRevalidation: false
      timeoutInMinutes: 0
      executionOrder: 2
  deployPhases:
  - deploymentInput:
      parallelExecution:
        parallelExecutionType: 0
      agentSpecification:
        identifier: vs2017-win2016
      skipArtifactsDownload: false
      artifactsDownloadInput:
        downloadInputs: []
      queueId: 9
      demands: []
      enableAccessToken: false
      timeoutInMinutes: 0
      jobCancelTimeoutInMinutes: 1
      condition: succeeded()
      overrideInputs: {}
    rank: 1
    phaseType: 1
    name: Cookbooks Merge & Tag
    refName: 
    workflowTasks:
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Artifact Check - Set Gate Variable
      refName: Gate
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1"
        arguments: -Version "w19d-15-0" -osName "Windows Server 2019"
        script: |
          # Write your PowerShell commands here.

          Write-Host "Hello World"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Artifact Check - Output Gate Variable
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: inline
        filePath: ''
        arguments: ''
        script: "# Print the Gate variables.\nif ( $(Gate.IsEnabled) -eq 'True' )
          {\n   Write-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl)
          Gate.Sku: $(Gate.Sku)\" | Out-Default\n} \n"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Write access to Git Repo (robe070/cookbooks)
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1"
        arguments: "-GitBranch '$(CookbooksBranchLive)' -GitURL 'https://$(GitRobe070CookbooksPAT):x-oauth-basic@$(GitRobe070CookbooksGitHubName)'
          -GitUserEmail '$(GitUserEmail)' -GitUserName '$(GitUserName)' -GitRepoName
          '$(CookbooksSourceAlias)'"
        script: |
          # Write your PowerShell commands here.

          Write-Host "Hello World"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: Merge robe070/cookbooks repo patch/paas to support/scalable
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitMerge.ps1"
        arguments: "-GitRepoName '$(CookbooksSourceAlias)' -GitSourceBranch '$(CookbooksBranchPreview)'
          -GitTargetBranch '$(CookbooksBranchLive)'"
        script: |
          # Write your PowerShell commands here.

          Write-Host "Hello World"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
    - environment: {}
      taskId: e213ff0f-5d5c-4791-802d-52ea3e7be1f1
      version: 2.*
      name: 'Tag robe070/cookbooks repo '
      refName: ''
      enabled: true
      alwaysRun: false
      continueOnError: false
      timeoutInMinutes: 0
      retryCountOnTaskFailure: 0
      definitionType: task
      overrideInputs: {}
      condition: succeeded()
      inputs:
        targetType: filePath
        filePath: "$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitTag.ps1"
        arguments: "-GitRepoName '$(CookbooksSourceAlias)' -Tags  'AzureImage-Bld-$(Build.BuildId)-$(Release.ReleaseName)-$(Gate.Sku)'"
        script: |
          # Write your PowerShell commands here.

          Write-Host "Hello World"
        errorActionPreference: stop
        failOnStderr: 'false'
        showWarnings: 'false'
        ignoreLASTEXITCODE: 'false'
        pwsh: 'false'
        workingDirectory: ''
        runScriptInSeparateScope: 'false'
  environmentOptions:
    emailNotificationType: OnlyOnFailure
    emailRecipients: release.environment.owner;release.creator
    skipArtifactsDownload: false
    timeoutInMinutes: 0
    enableAccessToken: false
    publishDeploymentStatus: true
    badgeEnabled: false
    autoLinkWorkItems: false
    pullRequestDeploymentEnabled: false
  demands: []
  conditions:
  - name: Go Live
    conditionType: 2
    value: '4'
    result: 
  executionPolicy:
    concurrencyCount: 1
    queueDepthCount: 0
  schedules: []
  currentRelease:
    id: 359
    url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/359
    _links: {}
  retentionPolicy:
    daysToKeep: 30
    releasesToKeep: 3
    retainBuild: true
  processParameters: {}
  properties:
    BoardsEnvironmentType:
      "$type": System.String
      "$value": unmapped
    LinkBoardsWorkItems:
      "$type": System.String
      "$value": 'False'
  preDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  postDeploymentGates:
    id: 0
    gatesOptions: 
    gates: []
  environmentTriggers: []
  badgeUrl: https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/17/226
artifacts:
- sourceId: 8b247587-8424-435c-9068-7e9fdd0edcf1:31
  type: Build
  alias: _Lansa Images - Cookbooks
  definitionReference:
    artifactSourceDefinitionUrl:
      id: https://dev.azure.com/VisualLansa/_permalink/_build/index?collectionId=556ac44f-caae-4fef-a5b6-d964fed453e6&projectId=8b247587-8424-435c-9068-7e9fdd0edcf1&definitionId=31
      name: ''
    defaultVersionBranch:
      id: ''
      name: ''
    defaultVersionSpecific:
      id: ''
      name: ''
    defaultVersionTags:
      id: ''
      name: ''
    defaultVersionType:
      id: latestType
      name: Latest
    definition:
      id: '31'
      name: Build Image Release Artefacts 2.0
    definitions:
      id: ''
      name: ''
    IsMultiDefinitionType:
      id: 'False'
      name: 'False'
    project:
      id: 8b247587-8424-435c-9068-7e9fdd0edcf1
      name: Lansa Azure Scalable License Images
    repository:
      id: ''
      name: ''
  isPrimary: true
  isRetained: false
- sourceId: 9d6d2af7-59b3-4a25-a732-193412ebf91c:lansa/azure-quickstart-templates
  type: GitHub
  alias: _lansa_azure-quickstart-templates
  definitionReference:
    artifactSourceDefinitionUrl:
      id: https://github.com/lansa/azure-quickstart-templates
      name: ''
    branch:
      id: support/scalable
      name: support/scalable
    checkoutNestedSubmodules:
      id: 'True'
      name: Any nested submodules within
    checkoutSubmodules:
      id: ''
      name: ''
    connection:
      id: 9d6d2af7-59b3-4a25-a732-193412ebf91c
      name: lansa
    defaultVersionSpecific:
      id: ''
      name: ''
    defaultVersionType:
      id: latestFromBranchType
      name: Latest from the default branch
    definition:
      id: lansa/azure-quickstart-templates
      name: lansa/azure-quickstart-templates
    fetchDepth:
      id: ''
      name: ''
    gitHubRepositoryId:
      id: '65955667'
      name: '65955667'
    gitLfsSupport:
      id: ''
      name: ''
  isRetained: false
- sourceId: 7492bde4-cf4a-4da9-a127-66ad77b0c3c3:CelestialSystem/azure-quickstart-templates
  type: GitHub
  alias: _lansa_azure-quickstart-templates-celestial
  definitionReference:
    artifactSourceDefinitionUrl:
      id: https://github.com/CelestialSystem/azure-quickstart-templates
      name: ''
    branch:
      id: feature/139
      name: feature/139
    checkoutNestedSubmodules:
      id: 'True'
      name: Any nested submodules within
    checkoutSubmodules:
      id: ''
      name: ''
    connection:
      id: 7492bde4-cf4a-4da9-a127-66ad77b0c3c3
      name: robe070
    defaultVersionSpecific:
      id: ''
      name: ''
    defaultVersionType:
      id: latestFromBranchType
      name: Latest from the default branch
    definition:
      id: CelestialSystem/azure-quickstart-templates
      name: CelestialSystem/azure-quickstart-templates
    fetchDepth:
      id: '50'
      name: '50'
    gitHubRepositoryId:
      id: ''
      name: ''
    gitLfsSupport:
      id: ''
      name: ''
  isRetained: false
- sourceId: 7492bde4-cf4a-4da9-a127-66ad77b0c3c3:robe070/cookbooks
  type: GitHub
  alias: _robe070_cookbooks
  definitionReference:
    artifactSourceDefinitionUrl:
      id: https://github.com/robe070/cookbooks
      name: ''
    branch:
      id: debug/paas
      name: debug/paas
    checkoutNestedSubmodules:
      id: 'True'
      name: Any nested submodules within
    checkoutSubmodules:
      id: ''
      name: ''
    connection:
      id: 7492bde4-cf4a-4da9-a127-66ad77b0c3c3
      name: robe070
    defaultVersionSpecific:
      id: ''
      name: ''
    defaultVersionType:
      id: latestFromBranchType
      name: Latest from the default branch
    definition:
      id: robe070/cookbooks
      name: robe070/cookbooks
    fetchDepth:
      id: '50'
      name: '50'
    gitHubRepositoryId:
      id: '22703660'
      name: '22703660'
    gitLfsSupport:
      id: ''
      name: ''
  isRetained: false
triggers: []
releaseNameFormat: Release-$(rev:r)
tags: []
properties:
  DefinitionCreationSource:
    "$type": System.String
    "$value": ReleaseClone
  IntegrateBoardsWorkItems:
    "$type": System.String
    "$value": 'False'
  IntegrateJiraWorkItems:
    "$type": System.String
    "$value": 'false'
id: 17
name: Image Release 2.0
path: "\\Lansa"
projectReference: 
url: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/definitions/17
_links:
  self:
    href: https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/definitions/17
  web:
    href: https://dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_release?definitionId=17
